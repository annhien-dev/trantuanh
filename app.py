import os
import streamlit as st
import pandas as pd
from gtts import gTTS
from io import BytesIO

# ƒê·ªçc d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c sheet trong file Excel
@st.cache_data
def load_vocabulary_data():
    df = pd.read_excel('english_vocabulary.xlsx', sheet_name=None)
    return df

# T·∫°o file √¢m thanh t·ª´ vƒÉn b·∫£n (gTTS)
def generate_audio(text):
    try:
        if not text or not isinstance(text, str) or text.strip() == "":
            return None

        # Lo·∫°i b·ªè k√Ω t·ª± l·∫° c√≥ th·ªÉ g√¢y l·ªói
        clean_text = text.replace("‚Äú", '"').replace("‚Äù", '"').replace("‚Äò", "'").replace("‚Äô", "'").strip()

        tts = gTTS(text=clean_text, lang='en')
        audio_file = BytesIO()
        tts.save(audio_file)
        audio_file.seek(0)
        return audio_file
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Could not generate audio: {e}")
        return None

# Hi·ªÉn th·ªã b√†i ƒë·ªçc v√† t·ª´ v·ª±ng
def display_unit(unit_name, unit_data):
    if unit_name not in unit_data:
        st.error(f"Unit '{unit_name}' not found.")
        return

    unit_df = unit_data[unit_name]
    if not unit_df.empty:
        st.title(f"üìö Unit: {unit_name}")

        # Hi·ªÉn th·ªã b√†i ƒë·ªçc v√† ph√°t √¢m n·∫øu c√≥ file MP3
        reading_text = unit_df['Reading Text'].iloc[0]
        if pd.notna(reading_text):
            st.subheader("üìñ Reading Text:")
            st.write(reading_text)

            # Ph√°t √¢m b√†i ƒë·ªçc t·ª´ file MP3 n·∫øu c√≥
            st.subheader("üîä Listen to the reading:")
            audio_path = f"audio/{unit_name}.mp3"
            if os.path.exists(audio_path):
                st.audio(audio_path, format='audio/mp3')
            else:
                st.warning("‚ö†Ô∏è Audio file not found. Using TTS instead.")
                audio_file = generate_audio(reading_text)
                if audio_file:
                    st.audio(audio_file, format='audio/mp3')

            st.write("---")

        # Hi·ªÉn th·ªã t·ª´ v·ª±ng
        st.subheader("üìò Vocabulary:")
        vocabulary_data = unit_df[unit_df['Question'].isna()]  # L·ªçc d·ªØ li·ªáu t·ª´ v·ª±ng (kh√¥ng c√≥ c√¢u h·ªèi)
        
        for _, row in vocabulary_data.iterrows():
            st.markdown(f"**{row['Vocabulary']}** ({row['IPA']})")
            st.write(f"**Example**: {row['Example']}")
            st.write(f"**Explanation**: {row['Explanation']}")
            st.write(f"**Note**: {row['Note']}")

            # Ph√°t √¢m t·ª´ v·ª±ng qua TTS
            st.markdown("üîä **Pronunciation:**")
            audio_file = generate_audio(row['Vocabulary'])
            if audio_file:
                st.audio(audio_file, format='audio/mp3')

            # Ph√°t √¢m c√¢u v√≠ d·ª•
            st.markdown("üîä **Example Audio:**")
            audio_file = generate_audio(row['Example'])
            if audio_file:
                st.audio(audio_file, format='audio/mp3')

            st.write("---")
    else:
        st.error(f"Unit {unit_name} is empty!")

# Hi·ªÉn th·ªã c√¢u h·ªèi tr·∫Øc nghi·ªám
def display_quiz(unit_name, unit_df):
    st.subheader("üß† Quiz Time!")

    quiz_data = unit_df[unit_df['Question'].notna()]  # L·ªçc d·ªØ li·ªáu c√¢u h·ªèi
    if quiz_data.empty:
        st.info("No quiz questions found in this unit.")
        return

    # T·∫°o key duy nh·∫•t cho t·ª´ng l·∫ßn hi·ªÉn th·ªã c√¢u h·ªèi
    quiz_key = f"{unit_name}_quiz_counter"
    if quiz_key not in st.session_state:
        st.session_state[quiz_key] = 0

    # L·∫•y 1 c√¢u h·ªèi ng·∫´u nhi√™n m·ªói l·∫ßn
    question_row = quiz_data.sample(n=1).iloc[0]

    question = question_row['Question']
    options = [question_row['Option 1'], question_row['Option 2'], question_row['Option 3']]
    correct_answer = question_row['Correct Answer']
    explanation = question_row['Explanation']

    st.markdown(f"**‚ùì Question:** {question}")
    
    # Ph√°t √¢m c√¢u h·ªèi
    audio_file = generate_audio(question)
    if audio_file:
        st.audio(audio_file, format='audio/mp3')

    selected = st.radio("Choose the correct answer:", options, key=f"{unit_name}_radio_{st.session_state[quiz_key]}")

    if st.button("‚úÖ Submit", key=f"{unit_name}_submit_{st.session_state[quiz_key]}"):
        if selected == correct_answer:
            st.success("‚úÖ Correct!")
        else:
            st.error(f"‚ùå Incorrect! The correct answer is: {correct_answer}")

        if pd.notna(explanation):
            st.markdown(f"**Explanation:** {explanation}")
            explanation_audio = generate_audio(explanation)
            if explanation_audio:
                st.audio(explanation_audio, format='audio/mp3')

    if st.button("üîÅ Next Question", key=f"{unit_name}_next_{st.session_state[quiz_key]}"):
        st.session_state[quiz_key] += 1
        st.experimental_rerun()

# App ch√≠nh
def main():
    st.title("üßí English Learning App for Kids")

    unit_data = load_vocabulary_data()
    units = list(unit_data.keys())
    selected_unit = st.sidebar.selectbox("üìö Choose a Unit", units)

    if selected_unit:
        display_unit(selected_unit, unit_data)
        display_quiz(selected_unit, unit_data[selected_unit])

    st.markdown("---")
    text_to_speak = st.text_input("üîä Enter any text to hear it spoken aloud:")
    if text_to_speak:
        audio_file = generate_audio(text_to_speak)
        if audio_file:
            st.audio(audio_file, format="audio/mp3")

if __name__ == "__main__":
    main()
